{"ast":null,"code":"import TablaPersonas from '@/components/TablaPersonas.vue';\nimport FormularioPersona from '@/components/FormularioPersona.vue';\nimport { useCounterStore } from '@/stores/counter';\nimport { ref, onMounted } from 'vue';\nexport default {\n  name: 'app',\n  components: {\n    TablaPersonas,\n    FormularioPersona\n  },\n  setup() {\n    const personas = ref([]);\n    const listadoPersonas = async () => {\n      // Metodo para obtener un listado de personas\n      try {\n        const response = await fetch('http://127.0.0.1:8000/api/v1/personas');\n        personas.value = await response.json();\n      } catch (error) {\n        console.error(error);\n      }\n    };\n    const agregarPersona = async persona => {\n      // Metodo para agregar una persona\n      try {\n        const response = await fetch('http://127.0.0.1:8000/api/v1/personas', {\n          method: 'POST',\n          body: JSON.stringify(persona),\n          headers: {\n            'Content-type': 'application/json; charset=UTF-8'\n          }\n        });\n        const personaCreada = await response.json();\n        personas.value = [...personas.value, personaCreada];\n      } catch (error) {\n        console.error(error);\n      }\n    };\n    const eliminarPersona = async persona_id => {\n      // Metodo para eliminar una persona\n      try {\n        await fetch('http://127.0.0.1:8000/api/v1/personas' + persona_id + '/', {\n          method: \"DELETE\"\n        });\n        personas.value = personas.value.filter(u => u.id !== persona_id);\n      } catch (error) {\n        console.error(error);\n      }\n    };\n    const actualizarPersona = async (id, personaActualizada) => {\n      // Metodo para actualizar una persona\n      try {\n        const response = await fetch('http://127.0.0.1:8000/api/v1/personas' + personaActualizada.id + '/', {\n          method: 'PUT',\n          body: JSON.stringify(personaActualizada),\n          headers: {\n            'Content-type': 'application/json; charset=UTF -8'\n          }\n        });\n        const personaActualizadaJS = await response.json();\n        personas.value = personas.value.map(u => u.id === personaActualizada.id ? personaActualizadaJS : u);\n      } catch (error) {\n        console.error(error);\n      }\n    };\n    onMounted(() => {\n      listadoPersonas();\n    });\n    return {\n      personas,\n      agregarPersona,\n      eliminarPersona,\n      actualizarPersona\n    };\n  }\n};","map":{"version":3,"names":["TablaPersonas","FormularioPersona","useCounterStore","ref","onMounted","name","components","setup","personas","listadoPersonas","response","fetch","value","json","error","console","agregarPersona","persona","method","body","JSON","stringify","headers","personaCreada","eliminarPersona","persona_id","filter","u","id","actualizarPersona","personaActualizada","personaActualizadaJS","map"],"sources":["/home/david/Cliente/libreria-vue/ClienteVue/src/App.vue"],"sourcesContent":["<template>\n  <div id=\"app\" class=\"container\">\n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <h1>Personas</h1>\n      </div>\n    </div>\n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <formulario-persona @add-persona=\"agregarPersona\" />\n        <tabla-personas :personas=\"personas\" @delete-persona=\"eliminarPersona\" @actualizar-persona=\"actualizarPersona\"/>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\n  import TablaPersonas from '@/components/TablaPersonas.vue'\n  import FormularioPersona from '@/components/FormularioPersona.vue'\n  import { useCounterStore } from '@/stores/counter';\n  import { ref, onMounted } from 'vue';\n\n  export default {\n    name: 'app',\n    components: {\n      TablaPersonas,\n      FormularioPersona,\n    },\n    setup() {\n      const personas = ref([]);\n      const listadoPersonas = async () => {\n        // Metodo para obtener un listado de personas\n        try {\n          const response = await fetch('http://127.0.0.1:8000/api/v1/personas');\n          personas.value = await response.json();\n        } catch (error) {\n          console.error(error);\n        }\n      };\n\n      const agregarPersona = async (persona) => {\n        // Metodo para agregar una persona\n        try {\n          const response = await fetch('http://127.0.0.1:8000/api/v1/personas', {\n            method: 'POST',\n            body: JSON.stringify(persona),\n            headers: { 'Content-type': 'application/json; charset=UTF-8' },\n          });\n\n          const personaCreada = await response.json();\n          personas.value = [...personas.value, personaCreada];\n        } catch (error) {\n          console.error(error);\n        }\n      };\n\n      const eliminarPersona = async (persona_id) => {\n        // Metodo para eliminar una persona\n        try {\n          await fetch('http://127.0.0.1:8000/api/v1/personas'+persona_id+'/', {\n            method: \"DELETE\"\n          });\n          personas.value= personas.value.filter(u => u.id !== persona_id);\n          } catch (error) {\n            console.error(error);\n          }\n      };\n\n      const actualizarPersona = async (id, personaActualizada) => {\n        // Metodo para actualizar una persona\n        try {\n          const response = await fetch('http://127.0.0.1:8000/api/v1/personas'+personaActualizada.id+'/', {\n            method: 'PUT',\n            body: JSON.stringify(personaActualizada),\n            headers: { 'Content-type': 'application/json; charset=UTF -8' },\n          });\n\n          const personaActualizadaJS = await response.json();\n          personas.value = personas.value.map(u => (u.id === personaActualizada.id ? personaActualizadaJS : u));\n        } catch (error) {\n          console.error(error);\n        }\n      };\n\n      onMounted(() => {\n        listadoPersonas();\n      });\n\n      return {\n        personas,\n        agregarPersona,\n        eliminarPersona,\n        actualizarPersona,\n      };\n    },\n  }\n</script>\n\n<style>\n  button {\n    background: #009435;\n    border: 1px solid #009435;\n  }\n</style>\n"],"mappings":"AAiBE,OAAOA,aAAY,MAAO,gCAA+B;AACzD,OAAOC,iBAAgB,MAAO,oCAAmC;AACjE,SAASC,eAAc,QAAS,kBAAkB;AAClD,SAASC,GAAG,EAAEC,SAAQ,QAAS,KAAK;AAEpC,eAAe;EACbC,IAAI,EAAE,KAAK;EACXC,UAAU,EAAE;IACVN,aAAa;IACbC;EACF,CAAC;EACDM,KAAKA,CAAA,EAAG;IACN,MAAMC,QAAO,GAAIL,GAAG,CAAC,EAAE,CAAC;IACxB,MAAMM,eAAc,GAAI,MAAAA,CAAA,KAAY;MAClC;MACA,IAAI;QACF,MAAMC,QAAO,GAAI,MAAMC,KAAK,CAAC,uCAAuC,CAAC;QACrEH,QAAQ,CAACI,KAAI,GAAI,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;MACxC,EAAE,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;MACtB;IACF,CAAC;IAED,MAAME,cAAa,GAAI,MAAOC,OAAO,IAAK;MACxC;MACA,IAAI;QACF,MAAMP,QAAO,GAAI,MAAMC,KAAK,CAAC,uCAAuC,EAAE;UACpEO,MAAM,EAAE,MAAM;UACdC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACJ,OAAO,CAAC;UAC7BK,OAAO,EAAE;YAAE,cAAc,EAAE;UAAkC;QAC/D,CAAC,CAAC;QAEF,MAAMC,aAAY,GAAI,MAAMb,QAAQ,CAACG,IAAI,CAAC,CAAC;QAC3CL,QAAQ,CAACI,KAAI,GAAI,CAAC,GAAGJ,QAAQ,CAACI,KAAK,EAAEW,aAAa,CAAC;MACrD,EAAE,OAAOT,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;MACtB;IACF,CAAC;IAED,MAAMU,eAAc,GAAI,MAAOC,UAAU,IAAK;MAC5C;MACA,IAAI;QACF,MAAMd,KAAK,CAAC,uCAAuC,GAACc,UAAU,GAAC,GAAG,EAAE;UAClEP,MAAM,EAAE;QACV,CAAC,CAAC;QACFV,QAAQ,CAACI,KAAK,GAAEJ,QAAQ,CAACI,KAAK,CAACc,MAAM,CAACC,CAAA,IAAKA,CAAC,CAACC,EAAC,KAAMH,UAAU,CAAC;MAC/D,EAAE,OAAOX,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;MACtB;IACJ,CAAC;IAED,MAAMe,iBAAgB,GAAI,MAAAA,CAAOD,EAAE,EAAEE,kBAAkB,KAAK;MAC1D;MACA,IAAI;QACF,MAAMpB,QAAO,GAAI,MAAMC,KAAK,CAAC,uCAAuC,GAACmB,kBAAkB,CAACF,EAAE,GAAC,GAAG,EAAE;UAC9FV,MAAM,EAAE,KAAK;UACbC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACS,kBAAkB,CAAC;UACxCR,OAAO,EAAE;YAAE,cAAc,EAAE;UAAmC;QAChE,CAAC,CAAC;QAEF,MAAMS,oBAAmB,GAAI,MAAMrB,QAAQ,CAACG,IAAI,CAAC,CAAC;QAClDL,QAAQ,CAACI,KAAI,GAAIJ,QAAQ,CAACI,KAAK,CAACoB,GAAG,CAACL,CAAA,IAAMA,CAAC,CAACC,EAAC,KAAME,kBAAkB,CAACF,EAAC,GAAIG,oBAAmB,GAAIJ,CAAE,CAAC;MACvG,EAAE,OAAOb,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;MACtB;IACF,CAAC;IAEDV,SAAS,CAAC,MAAM;MACdK,eAAe,CAAC,CAAC;IACnB,CAAC,CAAC;IAEF,OAAO;MACLD,QAAQ;MACRQ,cAAc;MACdQ,eAAe;MACfK;IACF,CAAC;EACH;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}